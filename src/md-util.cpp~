#include <stdio.h>

#include "cll.h"
#include "util.h"

#include <vector>

void CL::loadData(std::vector<Vec4> pos, std::vector<Vec4> vel,
                  std::vector<Vec4> col) {
  // Store the number of particles and the size in bytes of our arrays.
  num = pos.size();
  array_size = num * sizeof(Vec4);
  // Create VBOs (defined in util.cpp).
  p_vbo = createVBO(&pos[0], array_size, GL_ARRAY_BUFFER, GL_DYNAMIC_DRAW);
  c_vbo = createVBO(&col[0], array_size, GL_ARRAY_BUFFER, GL_DYNAMIC_DRAW);

  // Make sure OpenGL is finished before we proceed.
  glFinish();
  printf("gl interop!\n");
  // Create OpenCL buffer from GL VBO.
  cl_vbos.push_back(cl::BufferGL(context, CL_MEM_READ_WRITE, p_vbo, &err));
  //printf("v_vbo: %s\n", oclErrorString(err));
  cl_vbos.push_back(cl::BufferGL(context, CL_MEM_READ_WRITE, c_vbo, &err));
  // We don't need to push any data here because it's already in the VBO.


  // Create the OpenCL only arrays.
  cl_velocities = cl::Buffer(context, CL_MEM_WRITE_ONLY, array_size, NULL,
                             &err);
  cl_pos_gen = cl::Buffer(context, CL_MEM_WRITE_ONLY, array_size, NULL, &err);
  cl_vel_gen = cl::Buffer(context, CL_MEM_WRITE_ONLY, array_size, NULL, &err);

  printf("Pushing data to the GPU\n");
  // Push our CPU arrays to the GPU.
  // Data is tightly packed in std::vector starting with the adress of the first
  // element.
  err = queue.enqueueWriteBuffer(cl_velocities, CL_TRUE, 0, array_size, &vel[0],
                                 NULL, &event);
  err = queue.enqueueWriteBuffer(cl_pos_gen, CL_TRUE, 0, array_size, &pos[0],
                                 NULL, &event);
  err = queue.enqueueWriteBuffer(cl_vel_gen, CL_TRUE, 0, array_size, &vel[0],
                                 NULL, &event);
  queue.finish();
}

void CL::popCorn() {
  printf("in popCorn\n");
  // Initialize our kernel from the program.
  try {
    kernel = cl::Kernel(program, "part2", &err);
  }
  catch (cl::Error er) {
    printf("ERROR: %s(%s)\n", er.what(), oclErrorString(er.err()));
  }

  // Set the arguements of our kernel.
  try {
    err = kernel.setArg(0, cl_vbos[0]); // Position vbo.
    err = kernel.setArg(1, cl_vbos[1]); // Color vbo.
    err = kernel.setArg(2, cl_velocities);
    err = kernel.setArg(3, cl_pos_gen);
    err = kernel.setArg(4, cl_vel_gen);
  }
  catch (cl::Error er) {
    printf("ERROR: %s(%s)\n", er.what(), oclErrorString(er.err()));
  }
  // Wait for the command queue to finish these commands before proceeding.
  queue.finish();
}

void CL::runKernel() {
  // This will update our system by calculating new velocity and updating the
  // positions of our particles.
  // Make sure OpenGL is done using our VBOs.
  glFinish();
  // Map OpenGL buffer object for writing from OpenCL.
  // This passes in the vector of VBO buffer objects (position and color).
  err = queue.enqueueAcquireGLObjects(&cl_vbos, NULL, &event);
  //printf("acquire: %s\n", oclErrorString(err));
  queue.finish();

  float dt = .01f;
  kernel.setArg(5, dt); //pass in the timestep
  // Execute the kernel.
  err = queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(num),
                                   cl::NullRange, NULL, &event);
  //printf("clEnqueueNDRangeKernel: %s\n", oclErrorString(err));
  queue.finish();

  // Release the VBOs so OpenGL can play with them.
  err = queue.enqueueReleaseGLObjects(&cl_vbos, NULL, &event);
  //printf("release gl: %s\n", oclErrorString(err));
  queue.finish();
}
